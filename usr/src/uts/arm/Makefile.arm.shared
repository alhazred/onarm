#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#

#
# Copyright 2006 Sun Microsystems, Inc.  All rights reserved.
# Use is subject to license terms.
#

#
# Copyright (c) 2006-2009 NEC Corporation
#

#
#	Everybody needs to know how to build modstubs.o and to locate unix.o.
#
PLATFORM	 = $(ARM_PLATFORM)
UNIX_DIR	 = $(UTSBASE)/$(PLATFORM)/unix
GENLIB_DIR	 = $(UTSBASE)/arm/genunix
IPDRV_DIR	 = $(UTSBASE)/arm/ip
MODSTUBS_DIR	 = $(UNIX_DIR)
DSF_DIR		 = $(UTSBASE)/arm/genassym
LINTS_DIR	 = $(OBJS_DIR)
LINT_LIB_DIR	 = $(UTSBASE)/arm/lint-libs/$(OBJS_DIR)

UNIX_O		 = $(UNIX_DIR)/$(OBJS_DIR)/unix.o
GENLIB		 = $(GENLIB_DIR)/$(OBJS_DIR)/libgenunix.so
MODSTUBS_O	 = $(MODSTUBS_DIR)/$(OBJS_DIR)/modstubs.o
LINT_LIB	 = $(UTSBASE)/$(PLATFORM)/lint-libs/$(OBJS_DIR)/llib-lunix.ln
GEN_LINT_LIB	 = $(UTSBASE)/arm/lint-libs/$(OBJS_DIR)/llib-lgenunix.ln

# Static-link configuration file.
STATIC_CONF	= $(UTSBASE)/arm/static-$(ARM_PLATFORM).conf

#
#	Include the makefiles which define build rule templates, the
#	collection of files per module, and a few specific flags. Note
#	that order is significant, just as with an include path. The
#	first build rule template which matches the files name will be
#	used. By including these in order from most machine dependent
#	to most machine independent, we allow a machine dependent file
#	to be used in preference over a machine independent version
#	(Such as a machine specific optimization, which preserves the
#	interfaces.)
#
include $(UTSTREE)/arm/Makefile.files
include $(UTSTREE)/common/Makefile.files

#
# ----- TRANSITIONAL SECTION --------------------------------------------------
#

#
#	Not everything which *should* be a module is a module yet. The
#	following is a list of such objects which are currently part of
#	genunix but which might someday become kmods.  This must be
#	defined before we include Makefile.uts, or else genunix's build
#	won't be as parallel as we might like.
#
NOT_YET_KMODS	 = $(OLDPTY_OBJS) $(PTY_OBJS) $(MOD_OBJS)

#
# ----- END OF TRANSITIONAL SECTION -------------------------------------------
#
#	Include machine independent rules. Note that this does not imply
#	that the resulting module from rules in Makefile.uts is	machine
#	independent. Only that the build rules are machine independent.
#
include $(UTSBASE)/Makefile.uts

# Import platform-specific options.
include $(UTSBASE)/arm/Makefile.arm.$(ARM_PLATFORM)

#
#	The following must be defined for all implementations:
#
MODSTUBS	= $(UTSBASE)/arm/ml/modstubs.s

#
#	Define supported builds
#
DEF_BUILDS	= $(DEF_BUILDS32)
ALL_BUILDS	= $(ALL_BUILDS32)

#
#	Inline templates
#
#INLINES_32	= $(UTSBASE)/arm/ml/arm.il
INLINES		+= $(INLINES_$(CLASS))

#
# Support build-time tunable parameter.
#
$(USE_UTSTUNE)include	$(UTSTREE)/arm/Makefile.arm.tune

#
#	kernel-specific optimizations; override default in Makefile.master
#

CFLAGS_XARCH	= $(arm_CFLAGS)
COPTIMIZE	= $(COPTFLAG)

CFLAGS		= $(CFLAGS_XARCH)
CFLAGS		+= $(COPTIMIZE)
CFLAGS		+= $(INLINES) -D_ASM_INLINES
CFLAGS		+= $(CCMODE)
CFLAGS		+= $(SPACEFLAG)
CFLAGS		+= $(CCUNBOUND)
CFLAGS		+= $(CFLAGS_uts)

ASFLAGS_XARCH	= $(arm_ASFLAGS)

ASFLAGS		+= $(ASFLAGS_XARCH)
AS_INC_PATH	+= -I$(DSF_DIR)/$(OBJS_DIR)

#
#	The following must be defined for all implementations:
#
#	OFFSETS_IN:		offsets.in
#	CONSTANTS_IN:		constants.in
#
OFFSETS_IN	= $(UTSBASE)/arm/ml/offsets.in
CONSTANTS_IN	= $(UTSBASE)/arm/ml/constants.in

# If the kernel is static-linked kernel, we must use vmunix as uniqfile
# for ctfmerge. Note that this means that all modules under arm directory
# becomes platform-specific.
$(STATIC_UNIX)CTFMERGE_GENUNIX	= $(UNIX_DIR)/$(OBJS_DIR)/vmunix

#
#	Define the base directory for installation.
#
BASE_INS_DIR	= $(ROOT)

#
#	Debugging level
#
#	Special knowledge of which special debugging options affect which
#	file is used to optimize the build if these flags are changed.
#
DEBUG_DEFS_OBJ32	=
DEBUG_DEFS_DBG32	= -DDEBUG
DEBUG_DEFS		= $(DEBUG_DEFS_$(BUILD_TYPE))

DEBUG_COND_OBJ32	:sh = echo \\043
DEBUG_COND_DBG32	=
IF_DEBUG_OBJ		= $(DEBUG_COND_$(BUILD_TYPE))$(OBJS_DIR)/

$(IF_DEBUG_OBJ)syscall.o	:=	DEBUG_DEFS	+= -DSYSCALLTRACE
$(IF_DEBUG_OBJ)clock.o		:=	DEBUG_DEFS	+= -DKSLICE=1

#
# This rather strange collection of definitions ensures that lint sees
# 'struct cpu' containing a fully declared embedded 'struct machcpu'
#
# There's something deeply dissatisfying about this.
#
LINTMACHFLAGS		= -D_MACHDEP -I../../$(PLATFORM)
$(LINTS_DIR)/kcpc.ln	:=	LINTFLAGS += $(LINTMACHFLAGS)
$(LINTS_DIR)/kdi.ln	:=	LINTFLAGS += $(LINTMACHFLAGS)
$(LINTS_DIR)/msacct.ln	:=	LINTFLAGS += $(LINTMACHFLAGS)
$(LINTS_DIR)/thread.ln	:=	LINTFLAGS += $(LINTMACHFLAGS)

#
#	Build `options'. These are entirely historical and the need for these
#	is completely removed by the module technology.
#
#OPTION_DEFS	 += -D_C2_AUDIT

#
#	Collect the preprocessor definitions to be associated with *all*
#	files.
#
ALL_DEFS	 = $(DEBUG_DEFS) $(OPTION_DEFS)

#
#	The kernels modules which are "implementation architecture"
#	specific for this machine are enumerated below. Note that most
#	of these modules must exist (in one form or another) for each
#	architecture.
#
#	Common Drivers (usually pseudo drivers) (/kernel/drv)
#	DRV_KMODS are built both 32-bit and 64-bit
#	DRV_KMODS_32 are built only 32-bit
#	DRV_KMODS_64 are built only 64-bit
#
DRV_KMODS	+= aggr
DRV_KMODS	+= arp
DRV_KMODS	+= bofi
DRV_KMODS	+= clone
DRV_KMODS	+= cmdk
DRV_KMODS	+= cn
#DRV_KMODS	+= conskbd
#DRV_KMODS	+= consms
DRV_KMODS	+= cpuid
DRV_KMODS	+= crypto
DRV_KMODS	+= cryptoadm
DRV_KMODS	+= devinfo
DRV_KMODS	+= dld
DRV_KMODS	+= dump
DRV_KMODS	+= fssnap
DRV_KMODS	+= icmp
$(USE_INET6)DRV_KMODS	+= icmp6
DRV_KMODS	+= ip
$(USE_INET6)DRV_KMODS	+= ip6
DRV_KMODS	+= ipf
DRV_KMODS	+= ippctl
DRV_KMODS	+= ipsecah
DRV_KMODS	+= ipsecesp
DRV_KMODS	+= iwscn
DRV_KMODS	+= keysock
DRV_KMODS	+= kssl
DRV_KMODS	+= kstat
DRV_KMODS	+= ksyms
# DRV_KMODS	+= kmdb
DRV_KMODS	+= llc1
DRV_KMODS	+= lofi
DRV_KMODS	+= log
DRV_KMODS	+= logindmux
DRV_KMODS	+= mm
DRV_KMODS	+= nca
DRV_KMODS	+= nsmb
DRV_KMODS	+= openeepr
DRV_KMODS	+= pm
DRV_KMODS	+= poll
DRV_KMODS	+= pool
DRV_KMODS	+= pseudo
DRV_KMODS	+= ptc
DRV_KMODS	+= ptm
DRV_KMODS	+= pts
DRV_KMODS	+= ptsl
DRV_KMODS	+= ramdisk
DRV_KMODS	+= random
DRV_KMODS	+= rts
DRV_KMODS	+= sad
#DRV_KMODS	+= sctp
#DRV_KMODS	+= sctp6
DRV_KMODS	+= sd
DRV_KMODS	+= sgen
DRV_KMODS	+= si3124
DRV_KMODS	+= smbsrv
DRV_KMODS	+= softmac
DRV_KMODS	+= spdsock
DRV_KMODS	+= sppp
DRV_KMODS	+= sppptun
DRV_KMODS	+= sy
DRV_KMODS	+= sysevent
DRV_KMODS	+= sysmsg
DRV_KMODS	+= tcp
$(USE_INET6)DRV_KMODS	+= tcp6
DRV_KMODS	+= tl
DRV_KMODS	+= tnf
DRV_KMODS	+= udp
$(USE_INET6)DRV_KMODS	+= udp6
DRV_KMODS	+= vni
#DRV_KMODS	+= vol
DRV_KMODS	+= wc
DRV_KMODS	+= winlock
DRV_KMODS	+= xramdev
DRV_KMODS	+= xramdisk
DRV_KMODS	+= zcons
DRV_KMODS	+= sprun


#
# Don't build some of these for OpenSolaris, since they will be
# replaced by binaries that are signed by Sun Release Engineering.
#
$(CLOSED_BUILD)DRV_KMODS	+= dca

$(CLOSED_BUILD)CLOSED_DRV_KMODS	+= chxge
$(CLOSED_BUILD)CLOSED_DRV_KMODS	+= glm
$(CLOSED_BUILD)CLOSED_DRV_KMODS	+= llc2
$(CLOSED_BUILD)CLOSED_DRV_KMODS	+= mpt
$(CLOSED_BUILD)CLOSED_DRV_KMODS	+= marvell88sx 

#
# Common code drivers
#

#
#	DTrace and DTrace Providers
#
DRV_KMODS	+= dtrace
DRV_KMODS	+= fbt
DRV_KMODS	+= lockstat
DRV_KMODS	+= profile
DRV_KMODS	+= sdt
DRV_KMODS	+= systrace
# DRV_KMODS	+= fasttrap

#
#	I/O framework test drivers
#
DRV_KMODS	+= pshot
DRV_KMODS	+= gen_drv
DRV_KMODS	+= tvhci tphci tclient
DRV_KMODS	+= emul64

#
#	Machine Specific Driver Modules (/kernel/drv):
#
#DRV_KMODS	+= pci_pci
DRV_KMODS	+= options
$(CLOSED_BUILD)CLOSED_DRV_KMODS	+= scsi_vhci

#
#	PCMCIA specific module(s)
#
# DRV_KMODS	+= pcs
# DRV_KMODS	+= pcata pcmem pcram
# DRV_KMODS	+= pem
# MISC_KMODS	+= cardbus
$(CLOSED_BUILD)CLOSED_DRV_KMODS	+= pcelx
$(CLOSED_BUILD)CLOSED_DRV_KMODS	+= pcser

#
#	I2O specific module(s)
#
# DRV_KMODS_32	+= pci_to_i2o i2o_bs i2o_scsi

#
#	SCSI Enclosure Services driver
#
# DRV_KMODS	+= ses

#
#	USB specific modules
#
DRV_KMODS	+= hid
DRV_KMODS	+= hubd
# DRV_KMODS	+= uhci
DRV_KMODS	+= usb_mid
DRV_KMODS	+= usb_ia
DRV_KMODS	+= scsa2usb
# DRV_KMODS	+= usbprn
# DRV_KMODS	+= ugen
DRV_KMODS	+= usbser
DRV_KMODS	+= usbsacm
# DRV_KMODS	+= usbsksp
# DRV_KMODS	+= usbsprl
# DRV_KMODS	+= usb_ac
# DRV_KMODS	+= usb_as
# DRV_KMODS	+= usbskel
DRV_KMODS	+= usbvc

$(CLOSED_BUILD)CLOSED_DRV_KMODS	+= usbser_edge

#
#	1394 modules
#
# MISC_KMODS	+= s1394 sbp2
# DRV_KMODS	+= hci1394 scsa1394
# DRV_KMODS	+= av1394
# DRV_KMODS	+= dcam1394

#
#	InfiniBand pseudo drivers
#
# DRV_KMODS	+= ib ibd

#
#	LVM modules
#
# DRV_KMODS	+= md
# MISC_KMODS	+= md_stripe md_hotspares md_mirror md_raid md_trans md_notify
# MISC_KMODS	+= md_sp

#
#	Brand modules
#
BRAND_KMODS	+=
DRV_KMODS	+=
STRMOD_KMODS	+=

#
#	Exec Class Modules (/kernel/exec):
#
EXEC_KMODS	+= elfexec intpexec javaexec

#
#	Scheduling Class Modules (/kernel/sched):
#
SCHED_KMODS	+= IA RT TS RT_DPTBL TS_DPTBL FSS FX FX_DPTBL

#
#	File System Modules (/kernel/fs):
#
FS_KMODS	+= autofs cachefs ctfs devfs fdfs fifofs hsfs lofs
FS_KMODS	+= mntfs namefs nfs objfs zfs
FS_KMODS	+= pcfs procfs sockfs specfs tmpfs udfs ufs xramfs sharefs
FS_KMODS	+= smbfs

#
#	Streams Modules (/kernel/strmod):
#
STRMOD_KMODS	+= 6to4tun atun bufmod connld dedump ldterm pckt pfmod pipemod
STRMOD_KMODS	+= ptem redirmod rpcmod rlmod telmod timod
STRMOD_KMODS	+= spppasyn spppcomp
STRMOD_KMODS	+= tirdwr ttcompat tun
STRMOD_KMODS	+= usbkbm
STRMOD_KMODS	+= usbms
# STRMOD_KMODS	+= usb_ah
STRMOD_KMODS	+= drcompat
STRMOD_KMODS	+= cryptmod

#
#	'System' Modules (/kernel/sys):
#
#SYS_KMODS	+= c2audit
SYS_KMODS	+= doorfs
SYS_KMODS	+= exacctsys
SYS_KMODS	+= inst_sync
SYS_KMODS	+= kaio
SYS_KMODS	+= msgsys
SYS_KMODS	+= pipe
SYS_KMODS	+= portfs
SYS_KMODS	+= pset
SYS_KMODS	+= semsys
SYS_KMODS	+= shmsys
SYS_KMODS	+= sysacct
SYS_KMODS	+= acctctl

#
#	'Misc' Modules (/kernel/misc)
#	MISC_KMODS are built both 32-bit and 64-bit
#	MISC_KMODS_32 are built only 32-bit
#	MISC_KMODS_64 are built only 64-bit
#
# MISC_KMODS	+= amsrc2
# MISC_KMODS	+= audiosup
MISC_KMODS	+= busra
MISC_KMODS	+= cmlb
MISC_KMODS	+= consconfig
MISC_KMODS	+= ctf
MISC_KMODS	+= dls
MISC_KMODS	+= fssnap_if
MISC_KMODS	+= gda
MISC_KMODS	+= gld
MISC_KMODS	+= hidparser
MISC_KMODS	+= hook
MISC_KMODS	+= hpcsvc
MISC_KMODS_32	+= i2o_msg
# MISC_KMODS	+= ibcm
# MISC_KMODS	+= ibdm
# MISC_KMODS	+= ibmf
# MISC_KMODS	+= ibtl
MISC_KMODS	+= idmap
MISC_KMODS	+= ipc
#MISC_KMODS	+= kbtrans
MISC_KMODS	+= kcf
MISC_KMODS	+= kgssapi
MISC_KMODS	+= kiconv
MISC_KMODS	+= kmech_dummy
MISC_KMODS	+= kmech_krb5
MISC_KMODS	+= krtld
MISC_KMODS	+= mac
# MISC_KMODS	+= mixer
MISC_KMODS	+= neti
MISC_KMODS	+= nfs_dlboot
MISC_KMODS	+= nfssrv
MISC_KMODS	+= pcicfg
# MISC_KMODS	+= pcihp
# MISC_KMODS	+= pcmcia
MISC_KMODS	+= rpcsec
MISC_KMODS	+= rpcsec_gss
# MISC_KMODS	+= sata
MISC_KMODS	+= scsi
MISC_KMODS	+= strategy
MISC_KMODS	+= strplumb
#MISC_KMODS	+= tem
MISC_KMODS	+= tlimod
MISC_KMODS	+= usba
# MISC_KMODS	+= usba10
# MISC_KMODS	+= usbs49_fw
MISC_KMODS	+= zmod

$(CLOSED_BUILD)CLOSED_MISC_KMODS	+= amsrc1
$(CLOSED_BUILD)CLOSED_MISC_KMODS	+= klmmod klmops
$(CLOSED_BUILD)CLOSED_MISC_KMODS	+= phx

#
#	Software Cryptographic Providers (/kernel/crypto):
#
# Don't build some of these for OpenSolaris, since they will be
# replaced by binaries that are signed by Sun RE.
#
$(CLOSED_BUILD)CRYPTO_KMODS	+= aes
$(CLOSED_BUILD)CRYPTO_KMODS	+= arcfour
$(CLOSED_BUILD)CRYPTO_KMODS	+= blowfish
$(CLOSED_BUILD)CRYPTO_KMODS	+= des
CRYPTO_KMODS	+= md4
CRYPTO_KMODS	+= md5
#CRYPTO_KMODS	+= rsa	# Requires common/bigint
CRYPTO_KMODS	+= sha1
CRYPTO_KMODS	+= sha2
CRYPTO_KMODS	+= swrand

#
#	IP Policy Modules (/kernel/ipp)
#
IPP_KMODS	+= dlcosmk
IPP_KMODS	+= flowacct
IPP_KMODS	+= ipgpc
IPP_KMODS	+= dscpmk
IPP_KMODS	+= tokenmt
IPP_KMODS	+= tswtclmt

#
#	generic-unix module (/kernel/genunix):
#
GENUNIX_KMODS	+= genunix

#
#	SVVS Testing Modules (/kernel/strmod):
#
#	These are streams and driver modules which are not to be
#	delivered with a released system. However, during development
#	it is convenient to build and install the SVVS kernel modules.
#
SVVS_KMODS	+= lmodb lmode lmodr lmodt lo tidg tivc tmux

SVVS		+= svvs

#
#	Modules eXcluded from the product:
#
$(CLOSED_BUILD)CLOSED_XMODS =		\
	adpu320		\
	daplt		\
	e1000g		\
	lsimega		\
	nge		\
	tavor


#
#	'Dacf' Modules (/kernel/dacf):
#
#DACF_KMODS	+= usb_ac_dacf

#
#	Performance Counter BackEnd modules (/usr/kernel/pcbe)
#
PCBE_KMODS	+= arm11_pcbe

#
#	MAC-Type Plugin Modules (/kernel/mac)
#
MAC_KMODS	+= mac_ether
MAC_KMODS	+= mac_wifi

#
#	Non-Volatile DRAM driver
#
DRV_KMODS	+= nvdram


#
# 'Devname' Modules (kernel/devname)
#
DEVNAME_KMODS	+=

#
#	kiconv modules (/kernel/kiconv):
#
KICONV_KMODS	+= kiconv_emea kiconv_ja kiconv_ko kiconv_sc kiconv_tc

#
#	'Dacf' Modules (/kernel/dacf):
#
DACF_KMODS	+= net_dacf
